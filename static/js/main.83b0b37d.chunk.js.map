{"version":3,"sources":["components/List.jsx","components/NavBar.js","components/ListForm.jsx","Config/config.js","components/App.js","serviceWorker.js","index.js"],"names":["List","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","listContent","listId","handleRemoveList","bind","assertThisInitialized","id","removeList","_this2","react_default","a","createElement","className","onClick","Component","NavBar","AppBar_default","position","ListForm","state","newListContent","handleUserInput","writeList","e","setState","target","value","addList","placeholder","onChange","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","app","firebase","initializeApp","db","database","ref","child","lists","previousLists","on","snap","push","key","val","i","length","splice","list","set","remove","_this3","components_NavBar","map","components_List","components_ListForm","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83b0b37d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'typeface-roboto';\r\nimport '../styles/List.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass List extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.listContent = props.listContent;\r\n        this.listId = props.listId;\r\n        this.handleRemoveList = this.handleRemoveList.bind(this);\r\n    }\r\n\r\n    handleRemoveList(id){\r\n        this.props.removeList(id);\r\n    }\r\n    \r\n    render(props){\r\n        return(\r\n            <div className=\"list fade-in\">\r\n                <span className=\"closebtn\" \r\n                    onClick={() => this.handleRemoveList(this.listId)}>\r\n                    &times;\r\n                </span>\r\n                <p className=\"listContent\">{ this.listContent }</p>\r\n            </div>\r\n         )\r\n    }\r\n}\r\n\r\nList.propTypes = {\r\n    listContent: PropTypes.string\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar'\r\n\r\nconst NavBar = () => {\r\n    return(\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                     To-Do \r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  NavBar;","import React, { Component } from 'react';\r\nimport 'typeface-roboto';\r\nimport '../styles/ListForm.css';\r\n\r\nclass ListForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            newListContent: '',\r\n        };\r\n        this.handleUserInput = this.handleUserInput.bind(this);\r\n        this.writeList = this.writeList.bind(this);\r\n\r\n    }\r\n\r\n    // When the user input changes, set the newListContent\r\n    // to the value of what's in the input box.\r\n    handleUserInput(e){\r\n        this.setState({\r\n            newListContent: e.target.value,     // the value of the text input\r\n        })\r\n    }\r\n\r\n    writeList(){\r\n        // call a method that sets the listcontent for a list to\r\n        // the value of input\r\n        this.props.addList(this.state.newListContent);\r\n        // Set newListContent back to an empty string.\r\n        this.setState({\r\n            newListContent: '',\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"formWrapper\">\r\n                <input className=\"listInput\"\r\n                placeholder=\"Add new item...\"\r\n                value={this.state.newListContent}\r\n                onChange={this.handleUserInput} />\r\n                <button className=\"listButton\"\r\n                onClick={this.writeList}>Add Item</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListForm;","export const DB_CONFIG = {\r\n    apiKey: \"AIzaSyCWSjcV0OBjJKRQU5BWTJ-ARvyCh4Sj6e8\",\r\n    authDomain: \"electron-todo-b9d67.firebaseapp.com\",\r\n    databaseURL: \"https://electron-todo-b9d67.firebaseio.com\",\r\n    projectId: \"electron-todo-b9d67\",\r\n    storageBucket: \"electron-todo-b9d67.appspot.com\",\r\n    messagingSenderId: \"648932146774\"\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport List from './List';\r\nimport NavBar from './NavBar'\r\nimport ListForm from './ListForm';\r\nimport { DB_CONFIG } from '../Config/config';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'typeface-roboto';\r\nimport '../styles/App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.addList = this.addList.bind(this);\r\n    this.removeList = this.removeList.bind(this);\r\n\r\n    this.app = firebase.initializeApp(DB_CONFIG);\r\n    this.db = this.app.database().ref().child('lists');\r\n    \r\n    //We are going to setup the React state of our component\r\n    this.state = {\r\n      lists: [],\r\n    }\r\n  }\r\n  \r\n  componentWillMount(){\r\n    const previousLists = this.state.lists;\r\n\r\n    // DataSnapshot\r\n    this.db.on('child_added', snap => {\r\n      previousLists.push({\r\n        id: snap.key,\r\n        listContent: snap.val().listContent,\r\n      })\r\n\r\n      this.setState({\r\n        lists: previousLists\r\n      })\r\n    })\r\n\r\n    this.db.on('child_removed', snap => {\r\n      for(var i=0; i < previousLists.length; i++)\r\n      {\r\n        if(previousLists[i].id === snap.key){\r\n          previousLists.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        lists: previousLists\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  addList(list){\r\n    this.db.push().set({ listContent: list});\r\n  }\r\n\r\n  removeList(listId){\r\n    this.db.child(listId).remove();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"listsWrapper\">\r\n        <div className=\"listsHeader\">\r\n          <div>\r\n            <NavBar />  \r\n          </div>\r\n        </div>\r\n        <div className=\"listsBody\">\r\n          {\r\n            this.state.lists.map((list) => {\r\n              return(\r\n                <List listContent={list.listContent}\r\n                  listId={list.id}\r\n                  key={list.id}\r\n                  removeList = {this.removeList} />\r\n              )\r\n            })\r\n            \r\n          }\r\n          </div>\r\n        <div className=\"listsFooter\">\r\n          <ListForm addList={this.addList}  />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'typeface-roboto';\r\nimport '../src/styles/index.css';\r\nimport App from '../src/components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('todoapp'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}